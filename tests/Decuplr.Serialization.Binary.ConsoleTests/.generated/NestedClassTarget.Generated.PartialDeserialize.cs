using System;
using System.ComponentModel;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using Decuplr.Serialization;
using Decuplr.Serialization.Binary;
using static Decuplr.Serialization.Binary.Internal.AssemblyFormatProvider_Decuplr_Serialization_Binary_ConsoleTests_41QRTFMAAACQ2;


namespace Decuplr.Serialization.Binary.ConsoleTests {
// This file is automatically generated by Decuplr.Serilization.Binary library
// For more information, see https://decuplr.dev/serialization/binary

// Debug Info : Built by PartialTypeDeserialize
public  partial class TestClass3{
public  partial class NestedClassTarget{
[GeneratedCode ("Decuplr.Serialization.Binary.SourceGenerator", "1.0.0.0")]
[EditorBrowsable(EditorBrowsableState.Never)]
// This is for "TryDeserialize" constructor
internal NestedClassTarget (in NestedClassTarget_7VS9HJUOT01A2_TypeParserArgs parsers, ReadOnlySpan<byte> span, out int readBytes, out DeserializeResult result) {
readBytes = -1;
var originalSpanLength = span.Length;
{
// Configure for argument Target
var currentReadBytes = 0;
result = TryDeserialize_Target (in parsers, span, out currentReadBytes, out var desResult);
Target = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_Target (in NestedClassTarget_7VS9HJUOT01A2_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out int value){
return parsers.Parser_0_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
{
// Configure for argument Result
var currentReadBytes = 0;
result = TryDeserialize_Result (in parsers, span, out currentReadBytes, out var desResult);
Result = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_Result (in NestedClassTarget_7VS9HJUOT01A2_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out int value){
return parsers.Parser_1_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
readBytes = originalSpanLength - span.Length;
result = DeserializeResult.Success;
}
public NestedClassTarget () {
}
}
}
}
