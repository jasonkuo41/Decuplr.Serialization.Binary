using System;
using System.ComponentModel;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using Decuplr.Serialization;
using Decuplr.Serialization.Binary;
using static Decuplr.Serialization.Binary.Internal.AssemblyFormatProvider_Benchmark_SV5T16NWE1PR2;


namespace Benchmark.Models {
// This file is automatically generated by Decuplr.Serilization.Binary library
// For more information, see https://decuplr.dev/serialization/binary

// Debug Info : Built by PartialTypeDeserialize
public  partial class SimplePoco{
[GeneratedCode ("Decuplr.Serialization.Binary.SourceGenerator", "1.0.0.0")]
[EditorBrowsable(EditorBrowsableState.Never)]
// This is for "TryDeserialize" constructor
internal SimplePoco (in SimplePoco_DXLT9ZBUDDGJ3_TypeParserArgs parsers, ReadOnlySpan<byte> span, out int readBytes, out DeserializeResult result) {
readBytes = -1;
var originalSpanLength = span.Length;
{
// Configure for argument OldAccountId
var currentReadBytes = 0;
result = TryDeserialize_OldAccountId (in parsers, span, out currentReadBytes, out var desResult);
OldAccountId = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_OldAccountId (in SimplePoco_DXLT9ZBUDDGJ3_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out long value){
return parsers.Parser_0_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
{
// Configure for argument NewAccountId
var currentReadBytes = 0;
result = TryDeserialize_NewAccountId (in parsers, span, out currentReadBytes, out var desResult);
NewAccountId = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_NewAccountId (in SimplePoco_DXLT9ZBUDDGJ3_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out long value){
return parsers.Parser_1_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
{
// Configure for argument InfoId
var currentReadBytes = 0;
result = TryDeserialize_InfoId (in parsers, span, out currentReadBytes, out var desResult);
InfoId = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_InfoId (in SimplePoco_DXLT9ZBUDDGJ3_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out long value){
return parsers.Parser_2_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
{
// Configure for argument LastChangeTime
var currentReadBytes = 0;
result = TryDeserialize_LastChangeTime (in parsers, span, out currentReadBytes, out var desResult);
LastChangeTime = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_LastChangeTime (in SimplePoco_DXLT9ZBUDDGJ3_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out System.DateTime value){
return parsers.Parser_3_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
{
// Configure for argument FinalChangeTime
var currentReadBytes = 0;
result = TryDeserialize_FinalChangeTime (in parsers, span, out currentReadBytes, out var desResult);
FinalChangeTime = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_FinalChangeTime (in SimplePoco_DXLT9ZBUDDGJ3_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out System.DateTime value){
return parsers.Parser_4_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
{
// Configure for argument FastChangeTime
var currentReadBytes = 0;
result = TryDeserialize_FastChangeTime (in parsers, span, out currentReadBytes, out var desResult);
FastChangeTime = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_FastChangeTime (in SimplePoco_DXLT9ZBUDDGJ3_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out System.DateTime value){
return parsers.Parser_5_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
{
// Configure for argument FinalCommentId
var currentReadBytes = 0;
result = TryDeserialize_FinalCommentId (in parsers, span, out currentReadBytes, out var desResult);
FinalCommentId = desResult;
if (result != DeserializeResult.Success){
return;
}
span = span.Slice(currentReadBytes);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
DeserializeResult TryDeserialize_FinalCommentId (in SimplePoco_DXLT9ZBUDDGJ3_TypeParserArgs parsers,ReadOnlySpan<byte> providedSpan, out int readBytes, out long value){
return parsers.Parser_6_0.TryDeserialize(providedSpan, out readBytes, out value);
}

}
readBytes = originalSpanLength - span.Length;
result = DeserializeResult.Success;
}
public SimplePoco () {
}
}
}
