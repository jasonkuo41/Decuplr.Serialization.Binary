using System;
using System.ComponentModel;
using System.CodeDom.Compiler;
using Decuplr.Serialization;
using static Decuplr.Serialization.Binary.Internal.DefaultParserEntryPoint;


namespace Decuplr.Serialization.Binary.Internal.DefaultParsers {
// This file is automatically generated by Decuplr.Serilization.Binary library
// For more information, see https://decuplr.dev/serialization/binary

// Debug Info : Built by PartialTypeSerialize
internal  partial struct DateTimeShim{
[GeneratedCode ("Decuplr.Serialization.Binary.SourceGenerator", "1.0.0.0")]
[EditorBrowsable(EditorBrowsableState.Never)]
internal static bool ___generated__no_invoke_DateTimeShim_TrySerializer (in DateTimeShim_SJ32A9XBUFRV_TypeParserArgs parsers, Decuplr.Serialization.Binary.Internal.DefaultParsers.DateTimeShim value, Span<byte> destination, out int writtenBytes){
writtenBytes = -1;
var oglength = destination.Length;
int currentWrittenBytes;
if (!parsers.Parser_0_0.TrySerialize(value.ActualTime, destination, out currentWrittenBytes)) {
return false;
}
destination = destination.Slice(currentWrittenBytes);
writtenBytes = oglength - destination.Length;
return true;
}
[GeneratedCode ("Decuplr.Serialization.Binary.SourceGenerator", "1.0.0.0")]
[EditorBrowsable(EditorBrowsableState.Never)]
internal static int ___generated__no_invoke_DateTimeShim_Serializer (in DateTimeShim_SJ32A9XBUFRV_TypeParserArgs parsers, Decuplr.Serialization.Binary.Internal.DefaultParsers.DateTimeShim value, Span<byte> destination){
var oglength = destination.Length;
int currentWrittenBytes;
currentWrittenBytes = parsers.Parser_0_0.Serialize(value.ActualTime, destination);
destination = destination.Slice(currentWrittenBytes);
return oglength - destination.Length;
}
[GeneratedCode ("Decuplr.Serialization.Binary.SourceGenerator", "1.0.0.0")]
[EditorBrowsable(EditorBrowsableState.Never)]
internal static int ___generated__no_inoke_DateTimeShim_GetLength(in DateTimeShim_SJ32A9XBUFRV_TypeParserArgs parsers, Decuplr.Serialization.Binary.Internal.DefaultParsers.DateTimeShim value){
var result = 0;
result += parsers.Parser_0_0.GetBinaryLength(value.ActualTime);
return result;
}
}
}
