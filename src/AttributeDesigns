[Ignore]        Ignore
[Index]         FieldOrder

[BinaryLength]  FieldLength    
[BitUnion]      FieldBitLength 
[ItemCount]     FieldCount
X TBD           FieldAlignment
X TBD           FieldScale
[Namespace]     FieldEndianness
[Namespace]     FieldEncoding
-               FieldValue
[Constant]      FieldChecksum
X [Checksum]    FieldCrc16
X [Checksum]    FieldCrc32
-               FieldOffset
[FormatAs]      Subtype
-               SubtypeFactory
-               SubtypeDefault
[FormatAs]      SerializeAs
X               SerializeAsEnum
[IgnoreIfNot]   SerializeWhen
[IgnoreIf]      SerializeWhenNot
-               SerializeUntil
-               ItemLength
-               ItemSubtype
-               ItemSubtypeFactory
-               ItemSubtypeDefault
-               ItemSerializeUntil

{Internal}
[SerializationBinaryAssemblyEntryPoint]
[DefaultSerializationBinaryAssemblyEntryPoint]

[AssemblyDefinedParser(ParserKind.Binary, typeof(DateTime_0x5dfA), "MyType.Data.Namespace")]

[BinaryParser]
[BinaryFormat]
[BinaryInline]


// Completed
{Decuplr.Serialization}
[IgnoreIf] / [IgnoreIfNot]

// Planned
{Decuplr.Serialization.Binary}
[UseParserspace] : Allows user to determinate what parserspace to use
[BitUnion] : Allows a bit union

{Decuplr.Serialization}
[Constant] : Allows a field to be verified
[FormatAs] : 
[ParserspaceAssemblyAlias] : An assembly alias for the assembly

{Length Family (Decuplr.Serialization.Binary)}
[BinaryLength] : Dedicates the field as the position of writing the length data
[FixedBinaryLength] : Explicitly specify the binary length of the data
[ItemCount] : Dedicates the field as the count of an item

class TypeStub<T> { } this only contains the type info and are not meant for serialization

{Alias}
[ByteOrder]
[DefaultFormat]
[ExportPublicComposer]

[NullRule(NullAction.Throw / NullAction.AppendFixedBool / NullAction.DefaultValue)]
    Note to self : AppendFixedBool will always a append a bool to the data structure!

// Planned (Future)

{Decuplr.Serialization.Binary.Collections}
[CollectionLayout]
[YieldIf]
[YieldIfMatch]

{Decuplr.Serialization.Meta}
[ApplyParserspace]
[ApplyParserspaceWhen]

// In discussion
[Parserspace]



// Not Implemented
[CheckSum(0, 1)]


[CollectionLayout]
public struct BoolIterator<T> {
    [Index(0)]
    public T Data { get; }

    [Index(1), YieldIf(EvalMode.Consume, true)]
    public bool End { get; }
}

[CollectionLayout]
public struct NullTerminated<T> {
    [Index(0)]
    public T Data { get; }

    [Index(1), YieldIfMatch(EvalMode.Peek, 1, 2, 3)]
    private byte[] CheckTrailing { get; }

    [FixedBinaryLength(16, TrailingPattern = 0)]
    public TypeStub<byte> Zeros { get; }
}

[MemberChecksum(0, 3)]
public struct CheckSumProvider : ICheckSumProvider {
    public void CheckSum(ReadOnlySpan<byte> span) {

    }

    public void WriteSum(ReadOnlySpan<byte> source, Span<byte> target) {

    }
}

internal struct NullTerminated_Iterator<T> where T : IEnumerable, ILengthProvider<T> {
    public NullTerminated_Iterator(T item) {

    }


}


public enum EvalMode {
    Peek,
}